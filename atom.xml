<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨雨庚的博客</title>
  
  <subtitle>杨雨庚的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yyg.wiki/"/>
  <updated>2018-05-07T06:12:14.000Z</updated>
  <id>http://yyg.wiki/</id>
  
  <author>
    <name>Jason.Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySql常见索引失效原因总结</title>
    <link href="http://yyg.wiki/2018/05/07/Mysql%E5%B8%B8%E8%A7%81%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E5%8E%9F%E5%9B%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yyg.wiki/2018/05/07/Mysql常见索引失效原因总结/</id>
    <published>2018-05-07T03:39:59.000Z</published>
    <updated>2018-05-07T06:12:14.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="常见Mysql索引失效原因总结"><a href="#常见Mysql索引失效原因总结" class="headerlink" title="常见Mysql索引失效原因总结"></a>常见Mysql索引失效原因总结</h4><blockquote><blockquote></blockquote><p>1、WHERE字句的查询条件里有不等于号（WHERE column!=…），MYSQL将无法使用索引</p></blockquote><p>2、类似地，如果WHERE字句的查询条件里使用了函数（如：WHERE DAY(column)=…），MYSQL将无法使用索引</p><p>3、在JOIN操作中（需要从多个数据表提取数据时），MYSQL只有在主键和外键的数据类型相同时才能使用索引，否则即使建立了索引也不会使用</p><p>4、如果WHERE子句的查询条件里使用了比较操作符LIKE和REGEXP，MYSQL只有在搜索模板的第一个字符不是通配符的情况下才能使用索引。比如说，如果查询条件是LIKE ‘abc%’,MYSQL将使用索引；如果条件是LIKE ‘%abc’，MYSQL将不使用索引。</p><p>5、mysql查询只使用一个MySql索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。</p><p>6、没有查询条件，或者查询条件没有建立索引。</p><p>7、查询条件使用函数在索引列上，或者对索引列进行运算，运算包括(+，-，<em>，/，! 等) 错误的例子：select </em> from test where id-1=9; 正确的例子：select * from test where id=10;</p><p>8、CBO计算走索引花费过大的情况，这里指的是表占有的block要比索引小。 </p><p>9、隐式转换导致索引失效.这一点应当引起重视.也是开发中经常会犯的错误. 由于表的字段tu_mdn定义为varchar2(20),但在查询时把该字段作为number类型以where条件传给Oracle,这样会导致索引失效. 错误的例子：select <em> from test where tu_mdn=13333333333; 正确的例子：select </em> from test where tu_mdn=’13333333333’;</p><p>10、like “%_” 百分号在前. </p><p>11、单独引用复合索引里非第一位置的索引列.</p><p>12、字符型字段为数字时在where条件里不添加引号. </p><p>13、not in ,not exist. </p><p>14、B-tree索引 is null不会走,is not null会走,位图索引 is null,is not null 都会走 </p><p>15、联合索引 is not null 只要在建立的索引列（不分先后）都会走, in null时 必须要和建立索引第一列一起使用,当建立索引第一位置条件是is null 时,其他建立索引的列可以是is null（但必须在所有列 都满足is null的时候）,或者=一个值； 当建立索引的第一位置是=一个值时,其他索引列可以是任何情况（包括is null =一个值）,以上两种情况索引都会走。其他情况不会走。</p><p>16、比如有一条语句是这样的：select * from users where area=’beijing’ and age=22;<br>如果我们是在area和age上分别创建单个索引的话，由于mysql查询每次只能使用一个索引，所以虽然这样已经相对不做索引时全表扫描提高了很多效<br>率，但是如果在area、age两列上创建复合索引的话将带来更高的效率。如果我们创建了(area, age,<br>salary)的复合索引，那么其实相当于创建了(area,age,salary)、(area,age)、(area)三个索引，这被称为最佳左前缀<br>特性。因此我们在创建复合索引时应该将最常用作限制条件的列放在最左边，依次递减。 </p><p>17、索引不会包含有NULL值的列 只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。 </p><p>18、使用短索引 对串列进行MySql索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的 列，如果在前10 个或20 个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。 </p><p>参考资料:<br><a href="http://www.jb51.net/article/37190.htm" target="_blank" rel="noopener">http://www.jb51.net/article/37190.htm</a><br><a href="http://database.51cto.com/art/201010/229483.htm" target="_blank" rel="noopener">http://database.51cto.com/art/201010/229483.htm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;常见Mysql索引失效原因总结&quot;&gt;&lt;a href=&quot;#常见Mysql索引失效原因总结&quot; class=&quot;headerlink&quot; title=&quot;常见Mysql索引失效原因总结&quot;&gt;&lt;/a&gt;常见Mysql索引失效原因总结&lt;/h4&gt;&lt;blockquote&gt;
&lt;blockqu
      
    
    </summary>
    
      <category term="works" scheme="http://yyg.wiki/categories/works/"/>
    
    
      <category term="Mysql" scheme="http://yyg.wiki/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySql Hash与B-Tree索引</title>
    <link href="http://yyg.wiki/2018/05/04/Mysql-Hash%E4%B8%8EB-Tree%E7%B4%A2%E5%BC%95/"/>
    <id>http://yyg.wiki/2018/05/04/Mysql-Hash与B-Tree索引/</id>
    <published>2018-05-04T07:14:29.000Z</published>
    <updated>2018-05-07T03:44:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MySql-Hash索引和B-Tree索引的区别究竟在哪里呢？相信很多人都有这样的疑问，下文对两者的区别进行了详细的分析，供您参考。"><a href="#MySql-Hash索引和B-Tree索引的区别究竟在哪里呢？相信很多人都有这样的疑问，下文对两者的区别进行了详细的分析，供您参考。" class="headerlink" title="MySql Hash索引和B-Tree索引的区别究竟在哪里呢？相信很多人都有这样的疑问，下文对两者的区别进行了详细的分析，供您参考。"></a>MySql Hash索引和B-Tree索引的区别究竟在哪里呢？相信很多人都有这样的疑问，下文对两者的区别进行了详细的分析，供您参考。</h3><blockquote><p>MySql Hash索引结构的特殊性，其检索效率非常高，索引的检索可以一次定位，不像B-Tree 索引需要从根节点到枝节点，最后才能访问到页节点这样多次的IO访问，所以 Hash 索引的查询效率要远高于 B-Tree 索引。 可能很多人又有疑问了，既然 Hash 索引的效率要比 B-Tree 高很多，为什么大家不都用 Hash 索引而还要使用 B-Tree 索引呢？任何事物都是有两面性的，Hash 索引也一样，虽然 Hash 索引效率高，但是 Hash 索引本身由于其特殊性也带来了很多限制和弊端，主要有以下这些。</p></blockquote><h4 id="1-MySql-Hash索引仅仅能满足”-”-”IN”和”-lt-gt-”查询，不能使用范围查询。"><a href="#1-MySql-Hash索引仅仅能满足”-”-”IN”和”-lt-gt-”查询，不能使用范围查询。" class="headerlink" title="1. MySql Hash索引仅仅能满足”=”,”IN”和”&lt;=&gt;”查询，不能使用范围查询。"></a>1. MySql Hash索引仅仅能满足”=”,”IN”和”&lt;=&gt;”查询，不能使用范围查询。</h4><p>由于 MySql Hash索引比较的是进行 Hash 运算之后的 Hash 值，所以它只能用于等值的过滤，不能用于基于范围的过滤，因为经过相应的 Hash 算法处理之后的 Hash 值的大小关系，并不能保证和Hash运算前完全一样。</p><h4 id="2-MySql-Hash索引无法被用来避免数据的排序操作。"><a href="#2-MySql-Hash索引无法被用来避免数据的排序操作。" class="headerlink" title="2.MySql Hash索引无法被用来避免数据的排序操作。"></a>2.MySql Hash索引无法被用来避免数据的排序操作。</h4><p>由于 MySql Hash索引中存放的是经过 Hash 计算之后的 Hash 值，而且Hash值的大小关系并不一定和 Hash 运算前的键值完全一样，所以数据库无法利用索引的数据来避免任何排序运算；</p><h4 id="3-MySql-Hash索引不能利用部分索引键查询。"><a href="#3-MySql-Hash索引不能利用部分索引键查询。" class="headerlink" title="3.MySql Hash索引不能利用部分索引键查询。"></a>3.MySql Hash索引不能利用部分索引键查询。</h4><p>对于组合索引，Hash 索引在计算 Hash 值的时候是组合索引键合并后再一起计算 Hash 值，而不是单独计算 Hash 值，所以通过组合索引的前面一个或几个索引键进行查询的时候，Hash 索引也无法被利用。</p><h4 id="4-MySql-Hash索引在任何时候都不能避免表扫描。"><a href="#4-MySql-Hash索引在任何时候都不能避免表扫描。" class="headerlink" title="4.MySql Hash索引在任何时候都不能避免表扫描。"></a>4.MySql Hash索引在任何时候都不能避免表扫描。</h4><p>前面已经知道，Hash 索引是将索引键通过 Hash 运算之后，将 Hash运算结果的 Hash 值和所对应的行指针信息存放于一个 Hash 表中，由于不同索引键存在相同 Hash 值，所以即使取满足某个 Hash 键值的数据的记录条数，也无法从 Hash 索引中直接完成查询，还是要通过访问表中的实际数据进行相应的比较，并得到相应的结果。</p><h4 id="5-MySql-Hash索引遇到大量Hash值相等的情况后性能并不一定就会比B-Tree索引高。"><a href="#5-MySql-Hash索引遇到大量Hash值相等的情况后性能并不一定就会比B-Tree索引高。" class="headerlink" title="5.MySql Hash索引遇到大量Hash值相等的情况后性能并不一定就会比B-Tree索引高。"></a>5.MySql Hash索引遇到大量Hash值相等的情况后性能并不一定就会比B-Tree索引高。</h4><p>对于选择性比较低的索引键，如果创建 Hash 索引，那么将会存在大量记录指针信息存于同一个 Hash 值相关联。这样要定位某一条记录时就会非常麻烦，会浪费多次表数据的访问，而造成整体性能低下。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;MySql-Hash索引和B-Tree索引的区别究竟在哪里呢？相信很多人都有这样的疑问，下文对两者的区别进行了详细的分析，供您参考。&quot;&gt;&lt;a href=&quot;#MySql-Hash索引和B-Tree索引的区别究竟在哪里呢？相信很多人都有这样的疑问，下文对两者的区别进行
      
    
    </summary>
    
      <category term="works" scheme="http://yyg.wiki/categories/works/"/>
    
    
      <category term="MySql" scheme="http://yyg.wiki/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>简单的Windows Server 2008 Ngxin服务器启动/监控脚本</title>
    <link href="http://yyg.wiki/2018/04/27/%E7%AE%80%E5%8D%95%E7%9A%84Windows-Server-2008-Ngxin%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%AF%E5%8A%A8-%E7%9B%91%E6%8E%A7%E8%84%9A%E6%9C%AC/"/>
    <id>http://yyg.wiki/2018/04/27/简单的Windows-Server-2008-Ngxin服务器启动-监控脚本/</id>
    <published>2018-04-27T02:17:20.000Z</published>
    <updated>2018-04-27T02:18:10.144Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Ngxin启动/停止</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">REM Windows 下无效</span><br><span class="line">REM set PHP_FCGI_CHILDREN=5</span><br><span class="line"></span><br><span class="line">REM 每个进程处理的最大请求数，或设置为 Windows 环境变量</span><br><span class="line">set PHP_FCGI_MAX_REQUESTS=1000</span><br><span class="line"> </span><br><span class="line">echo Starting PHP FastCGI...</span><br><span class="line">D:/wnmp/RunHiddenConsole D:/wnmp/php/php-cgi.exe -b 127.0.0.1:9001 -c D:/wnmp/php/php.ini</span><br><span class="line">D:/wnmp/RunHiddenConsole D:/wnmp/php/php-cgi.exe -b 127.0.0.1:9002 -c D:/wnmp/php/php.ini</span><br><span class="line">D:/wnmp/RunHiddenConsole D:/wnmp/php/php-cgi.exe -b 127.0.0.1:9003 -c D:/wnmp/php/php.ini</span><br><span class="line">D:/wnmp/RunHiddenConsole D:/wnmp/php/php-cgi.exe -b 127.0.0.1:9004 -c D:/wnmp/php/php.ini</span><br><span class="line">echo Starting nginx...</span><br><span class="line">D:/wnmp/RunHiddenConsole D:/wnmp/nginx-1.8.1/nginx.exe -p D:/wnmp/nginx-1.8.1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@echo off</span><br><span class="line">echo Stopping nginx...  </span><br><span class="line">taskkill /F /T /IM nginx.exe &gt; nul</span><br><span class="line">echo Stopping PHP FastCGI...</span><br><span class="line">taskkill /F /T /IM php-cgi.exe &gt; nul</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><ul><li>简单实现服务器心跳检测BAT脚本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line"> </span><br><span class="line">:aaa</span><br><span class="line"></span><br><span class="line">set str = &quot;0&quot;</span><br><span class="line">echo request..</span><br><span class="line">curl -sL -w %%&#123;http_code&#125; xxx.com:/admin/index -o /dev/null &gt; check.txt</span><br><span class="line"></span><br><span class="line">set /p str=&lt;check.txt</span><br><span class="line"></span><br><span class="line">if not &quot;%str%&quot;==&quot;200&quot; ( </span><br><span class="line"> echo %date% %time:~0,5% is error&gt;&gt;check.log</span><br><span class="line"> </span><br><span class="line"> echo. | call D:\wnmp\stop_nginx.bat</span><br><span class="line"> ping -n 3 127.0.0.1&gt;nul</span><br><span class="line"> echo. | call D:\wnmp\start_nginx.bat</span><br><span class="line"> ping -n 3 127.0.0.1&gt;nul</span><br><span class="line"> echo %date% %time:~0,5% start success&gt;&gt;check.log</span><br><span class="line">)</span><br><span class="line">ping -n 60 127.0.0.1&gt;nul</span><br><span class="line">goto aaa</span><br></pre></td></tr></table></figure><ul><li>VBS脚本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">DIM objShell  </span><br><span class="line">set objShell=wscript.createObject(&quot;wscript.shell&quot;)  </span><br><span class="line">iReturn=objShell.Run(&quot;cmd.exe /C cron.bat&quot;, 0, TRUE)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Ngxin启动/停止&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="works" scheme="http://yyg.wiki/categories/works/"/>
    
    
      <category term="PHP" scheme="http://yyg.wiki/tags/PHP/"/>
    
      <category term="Linux" scheme="http://yyg.wiki/tags/Linux/"/>
    
      <category term="Windows" scheme="http://yyg.wiki/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>PEAR PCRE区别</title>
    <link href="http://yyg.wiki/2018/04/27/PEAR-PCRE%E5%8C%BA%E5%88%AB/"/>
    <id>http://yyg.wiki/2018/04/27/PEAR-PCRE区别/</id>
    <published>2018-04-27T02:16:10.000Z</published>
    <updated>2018-04-27T02:16:55.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Pear：是PHP的扩展代码包，所有的扩展均以PHP代码的形式出现，功能强大，安装简单，甚至可以改改就用。使用的时候，要在代码中进行Include才能够使用。</li></ul><ul><li>Pecl：是PHP的标准扩展，可以补充实际开发中所需的功能，所有的扩展都需要安装，在Windows下面以Dll的形式出现，在linux下面，需要单独进行编译，它的表现形式为根据PHP官方的标准用C语言写成，尽管源码开放但是一般人无法随意更改源码。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Pear：是PHP的扩展代码包，所有的扩展均以PHP代码的形式出现，功能强大，安装简单，甚至可以改改就用。使用的时候，要在代码中进行Include才能够使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Pecl：是PHP的标准扩展，可以补充实际开发中所需的功能，所
      
    
    </summary>
    
      <category term="works" scheme="http://yyg.wiki/categories/works/"/>
    
    
      <category term="PHP" scheme="http://yyg.wiki/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP待扩充知识点(陆续更新)</title>
    <link href="http://yyg.wiki/2018/04/27/PHP%E5%BE%85%E6%89%A9%E5%85%85%E7%9F%A5%E8%AF%86%E7%82%B9-%E9%99%86%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://yyg.wiki/2018/04/27/PHP待扩充知识点-陆续更新/</id>
    <published>2018-04-27T02:14:29.000Z</published>
    <updated>2018-04-27T02:15:03.743Z</updated>
    
    <content type="html"><![CDATA[<p><strong>PHP相关</strong></p><ul><li>LDAP轻量目录访问协议</li><li>EXIF图像处理扩展</li><li>Gearman任务分发扩展</li><li>YAC无锁nosql    <a href="http://www.laruence.com/tag/yac" target="_blank" rel="noopener">http://www.laruence.com/tag/yac</a></li><li>Opcache </li><li>Ondřej Surý  debian源码包 </li><li>PHP Laravel Pusher事件广播</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;PHP相关&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LDAP轻量目录访问协议&lt;/li&gt;
&lt;li&gt;EXIF图像处理扩展&lt;/li&gt;
&lt;li&gt;Gearman任务分发扩展&lt;/li&gt;
&lt;li&gt;YAC无锁nosql    &lt;a href=&quot;http://www.la
      
    
    </summary>
    
      <category term="works" scheme="http://yyg.wiki/categories/works/"/>
    
    
      <category term="PHP" scheme="http://yyg.wiki/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Svn st 状态解析</title>
    <link href="http://yyg.wiki/2018/04/27/Svn-st-%E7%8A%B6%E6%80%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://yyg.wiki/2018/04/27/Svn-st-状态解析/</id>
    <published>2018-04-27T02:10:53.000Z</published>
    <updated>2018-04-27T02:11:31.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SVN状态表"><a href="#SVN状态表" class="headerlink" title="SVN状态表"></a>SVN状态表</h2><p>svn st –help</p><p>status (stat, st): 显示工作副本中目录与文件的状态。<br>用法: status [PATH…]</p><p>  未指定参数时，只显示本地修改的条目(没有网络访问)。<br>  使用 -q 时，只显示本地修改条目的摘要信息。<br>  使用 -u 时，增加工作版本和服务器上版本过期信息。<br>  使用 -v 时，显示每个条目的完整版本信息。</p><p>  输出的前七栏各占一个字符宽度:<br>    第一栏: 表示一个项目是增加、删除，还是修改<br>      “ ” 无修改<br>      “A” 增加<br>      “C” 冲突<br>      “D” 删除<br>      “I” 忽略<br>      “M” 改变<br>      “R” 替换<br>      “X” 未纳入版本控制的目录，被外部引用的目录所创建<br>      “?” 未纳入版本控制<br>      “!” 该项目已遗失(被非 svn 命令删除)或不完整<br>      “~” 版本控制下的项目与其它类型的项目重名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &quot;G&quot; 与 &quot;U&quot;的区别:</span><br><span class="line"> 举例:甲乙同时从版本库里面checkout出来相同的版本 A的X文件 </span><br><span class="line"> 此时，甲没有修改X，乙修改并提交了X，那么如果甲做Update，那么X的文件状态就是U [update]    更新</span><br><span class="line">相反，如果甲对X进行了修改，乙进行了修改且提交，此时甲做Update，那么X文件的状态就是G ［merge合并］</span><br></pre></td></tr></table></figure><p>——将甲本地修改的版本和乙修改提交的版本进行合并</p><p>第二栏: 显示目录或文件的属性状态<br>      “ ” 无修改<br>      “C” 冲突<br>      “M” 改变<br>    第三栏: 工作副本目录是否被锁定<br>      “ ” 未锁定<br>      “L” 锁定<br>    第四栏: 已调度的提交是否包含副本历史<br>      “ ” 没有历史<br>      “+” 包含历史<br>    第五栏: 该条目相对其父目录是否已切换，或者是外部引用的文件<br>      “ ” 正常<br>      “S” 已切换<br>      “X” 被外部引用创建的文件<br>    第六栏: 版本库锁定标记<br>      (没有 -u)<br>      “ ” 没有锁定标记<br>      “K” 存在锁定标记<br>      (使用 -u)<br>      “ ” 没有在版本库中锁定，没有锁定标记<br>      “K” 在版本库中被锁定，存在锁定标记<br>      “O” 在版本库中被锁定，锁定标记在一些其他工作副本中<br>      “T” 在版本库中被锁定，存在锁定标记但已被窃取<br>      “B” 没有在版本库中被锁定，存在锁定标记但已被破坏<br>    第七栏: 项目冲突标记<br>      “ ” 正常<br>      “C” 树冲突<br>    如果项目包含于树冲突之中，在项目状态行后会附加行，说明冲突的种类。</p><p>  是否过期的信息出现的位置是第九栏(与 -u 并用时):<br>      “*” 服务器上有更新版本<br>      “ ” 工作副本是最新版的</p><p>  剩余的栏位皆为变动宽度，并以空白隔开:<br>    工作版本号(使用 -u 或 -v 时)<br>    最后提交的版本与最后提交的作者(使用 -v 时)<br>    工作副本路径总是最后一栏，所以它可以包含空白字符。</p><p>  范例输出:<br>    svn status wc<br>     M     wc/bar.c<br>    A  +   wc/qax.c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">svn status -u wc</span><br><span class="line"> M           965    wc/bar.c</span><br><span class="line">       *     965    wc/foo.c</span><br><span class="line">A  +         965    wc/qax.c</span><br><span class="line">Status against revision:   981</span><br><span class="line"></span><br><span class="line">svn status --show-updates --verbose wc</span><br><span class="line"> M           965       938 kfogel       wc/bar.c</span><br><span class="line">       *     965       922 sussman      wc/foo.c</span><br><span class="line">A  +         965       687 joe          wc/qax.c</span><br><span class="line">             965       687 joe          wc/zig.c</span><br><span class="line">Status against revision:   981</span><br><span class="line"></span><br><span class="line">svn status</span><br><span class="line"> M      wc/bar.c</span><br><span class="line">!     C wc/qaz.c</span><br><span class="line">      &gt;   local missing, incoming edit upon update</span><br><span class="line">D       wc/qax.c</span><br></pre></td></tr></table></figure><p>有效选项:<br>  -u [–show-updates]      : 显示更新信息<br>  -v [–verbose]           : 打印附加信息<br>  -N [–non-recursive]     : 过时；尝试 –depth=files 或 –depth=immediates<br>  –depth ARG              : 受深度参数 ARG(“empty”，“files”，“immediates”，或“infinity”) 约束的操作<br>  -q [–quiet]             : 不打印信息，或只打印概要信息<br>  –no-ignore              : 忽略默认值和 svn:ignore 属性<br>  –incremental            : 给予适合串联的输出<br>  –xml                    : 输出为 XML<br>  –ignore-externals       : 忽略外部项目<br>  –changelist ARG         : 只能对修改列表 ARG 成员操作<br>                             [aliases: –cl]</p><p>全局选项:<br>  –username ARG           : 指定用户名称 ARG<br>  –password ARG           : 指定密码 ARG<br>  –no-auth-cache          : 不要缓存用户认证令牌<br>  –non-interactive        : 不要交互提示<br>  –trust-server-cert      : 不提示的接受未知的 SSL 服务器证书(只用于选项 “–non-interactive”)<br>  –config-dir ARG         : 从目录 ARG 读取用户配置文件<br>  –config-option ARG      : 以下属格式设置用户配置选项：<br>                                 FILE:SECTION:OPTION=[VALUE]<br>                             例如：<br>                                 servers:global:http-library=serf</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SVN状态表&quot;&gt;&lt;a href=&quot;#SVN状态表&quot; class=&quot;headerlink&quot; title=&quot;SVN状态表&quot;&gt;&lt;/a&gt;SVN状态表&lt;/h2&gt;&lt;p&gt;svn st –help&lt;/p&gt;
&lt;p&gt;status (stat, st): 显示工作副本中目录与文件的状态
      
    
    </summary>
    
      <category term="works" scheme="http://yyg.wiki/categories/works/"/>
    
    
      <category term="SVN" scheme="http://yyg.wiki/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>UML中的关系</title>
    <link href="http://yyg.wiki/2018/04/27/UML%E4%B8%AD%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>http://yyg.wiki/2018/04/27/UML中的关系/</id>
    <published>2018-04-27T02:08:30.000Z</published>
    <updated>2018-04-27T02:09:15.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在UML的定义中，描述类和对象之间的关系，包括以下几种方式：依赖（Dependency）、关联（Association）、聚合（Aggregation）、组合（Composition）、泛化（Generalization）和实现（Realization）。现分别说明如下"><a href="#在UML的定义中，描述类和对象之间的关系，包括以下几种方式：依赖（Dependency）、关联（Association）、聚合（Aggregation）、组合（Composition）、泛化（Generalization）和实现（Realization）。现分别说明如下" class="headerlink" title="在UML的定义中，描述类和对象之间的关系，包括以下几种方式：依赖（Dependency）、关联（Association）、聚合（Aggregation）、组合（Composition）、泛化（Generalization）和实现（Realization）。现分别说明如下"></a>在UML的定义中，描述类和对象之间的关系，包括以下几种方式：依赖（Dependency）、关联（Association）、聚合（Aggregation）、组合（Composition）、泛化（Generalization）和实现（Realization）。现分别说明如下</h4><ol><li><strong>依赖</strong>（Dependency） <br><blockquote><p>   在uml中，“<strong>依赖</strong>”表示为<strong>带箭头的虚线</strong>，箭头指向被依赖的元素。是类与类之间的连接，表示为一个类依赖于另一个类的定义，其中一个类的变化将影响另一个类。依赖总是单向的，不应该存在双向依赖，这一点要特别注意。更具体的说，依赖可以理解为：一个类（A）对不在其实例作用域内的另一个类或对象（B）的任何类型的引用。大致包含以下几种情况：<br>   （1）局部变量；<br>   （2）方法的参数；<br>   （3）静态方法的调用；<br></p></blockquote></li></ol><ol start="2"><li><p><strong>关联</strong>（Association） <br></p><blockquote><p>   在uml中，<strong>关联</strong>表示为<strong>带箭头的实线</strong>。关联可以是单向的，也可以是双向的。如果是双向关联，则可以表示为双向箭头，或者没有箭头。一般来说，系统设计应表现为单向关联，这样利于维护。一个关联可以附加“多重性”的修饰符，表示两个类之间的数量关系。关联可以理解为：一个类（A）持有另一个类或对象（B）。<br></p></blockquote></li><li><p><strong>聚合</strong>（Aggregation） <br></p><blockquote><p>   在uml中，<strong>聚合</strong>关系表示为<strong>空心的菱形箭头线</strong>。聚合关系是关联关系的一种，表示一种“强”关联关系。对比与关联关系，两个类是处于同一个层次的。而聚合关系，两个类处于不同的层次，强调了一个整体/局部的关系。例如一辆汽车有一个引擎，4个轮胎。<br>   在聚合关系中，体现了一种“弱拥有”的概念。也就是说，对象A拥有对象B，但B并不是A的组成部分。更具体的表现为，如果A由B聚合而成，则A包含B的全局对象，但B对象可以不在A对象创建时创建。回到前面的例子，汽车对象由轮胎对象聚合而成，但是轮胎对象的生命期并不受汽车对象的左右。当汽车对象销毁时，轮胎对象也可以单独存在！<br><br>   从代码上看，聚合和关联没有任何区别。这里仅仅体现一种概念上的含义。在创建ClassA的时候，不一定需要同时创建ClassB的实例。<br></p></blockquote></li><li><p><strong>组合</strong>（Composition） <br></p><blockquote><p>   在uml中，<strong>组合</strong>关系表示为<strong>实心菱形箭头线</strong>。组合也叫<strong>合成</strong>。合成关系强调了比聚合关系更加强的整体/部分的关联，例如人和四肢。和聚合关系所不同的是，在组合关系中，虽然局部不一定随着整体的销毁而销毁，但整体要么负责保持局部的存活状态，要么负责将其销毁。也就是说，组合关系中，局部的存活期一定是小于，最多是等于整体的存活期的。<br></p></blockquote></li><li><p><strong>泛化</strong>（Generalization）与<strong>实现</strong>（Realization）<br></p><blockquote><p>   <strong>泛化</strong>也就是通常所谓的继承关系，在uml中表示为<strong>一个带空心三角的实线</strong>。表示为is-a的关系，是对象间耦合度最大的一种关系，子类继承父类的所有细节，并可以在此基础上添加自己的特性。<br>   <strong>实现</strong>就是对接口的定义实现，很简单。<strong>表现为带箭头的虚线</strong>。</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;在UML的定义中，描述类和对象之间的关系，包括以下几种方式：依赖（Dependency）、关联（Association）、聚合（Aggregation）、组合（Composition）、泛化（Generalization）和实现（Realization）。现分别说
      
    
    </summary>
    
    
      <category term="UML" scheme="http://yyg.wiki/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>什么是CAS协议</title>
    <link href="http://yyg.wiki/2018/04/27/%E4%BB%80%E4%B9%88%E6%98%AFCAS%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yyg.wiki/2018/04/27/什么是CAS协议/</id>
    <published>2018-04-27T02:05:45.000Z</published>
    <updated>2018-04-27T02:06:20.391Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是CAS协议"><a href="#什么是CAS协议" class="headerlink" title="什么是CAS协议"></a>什么是CAS协议</h3><p>Memcached于1.2.4版本新增CAS(Check and Set)协议类同于Java并发的CAS(Compare and Swap)原子操作，处理同一item被多个线程更改过程的并发问题。 </p><p>在Memcached中，每个key关联有一个64-bit长度的long型惟一数值，表示该key对应value的版本号。这个数值由Memcached server产生，从1开始，且同一Memcached server不会重复。在两种情况下这个版本数值会加1：1、新增一个key-value对；2、对某已有key对应的value值更新成功。删除item版本值不会减小。 </p><h3 id="CAS协议解决的问题"><a href="#CAS协议解决的问题" class="headerlink" title="CAS协议解决的问题"></a>CAS协议解决的问题</h3><p>模拟多个Memcached client并发set同一个key的场景。如clientA想把当前key的value set为”x”，且操作成功；clientB却把当前key的value值由”x”覆盖set为”y”，这时clientA再根据key去取value时得到”y”而不是期望的”x”，它使用这个值，但不知道这个值已经被其它线程修改过，就可能会出现问题。 </p><p>CAS协议解决这种并发修改问题。有线程试图修改当前key-value对的value时，先由gets方法得到item的版本号，操作完成提交数据时，使用cas方法谨慎变更，如果在本地对item操作过程中这个key-value对在Memcached server端被其它线程更改过，就放弃此次修改(乐观锁概念)。 </p><p>在我取数据时item的版本号是casValue.getCas()，所以提交时我期望item的版本号是没有改变过的。如果被修改过，不是我取数据时的版本号，那么Memcached server对这次提交什么也不做，返回true或false由用户自己来提出解决方案(什么也不做或是重新获取版本号，再次重试提交等)  </p><p>并发环境下的正确性验证 </p><p>用多个Memcached client并发更改同一个key值，将value递增，如果  操作次数-CAS失败次数 = value增加的值，表示并发环境下CAS处理没有问题。 </p><p>每次执行的结果都会不一样，如其中某次的执行结果为: 总共操作100次，冲突47次，且最后value由1涨到53，那么表示验证成功。 </p><p>转自<a href="http://langyu.iteye.com/blog/680052" target="_blank" rel="noopener">http://langyu.iteye.com/blog/680052</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是CAS协议&quot;&gt;&lt;a href=&quot;#什么是CAS协议&quot; class=&quot;headerlink&quot; title=&quot;什么是CAS协议&quot;&gt;&lt;/a&gt;什么是CAS协议&lt;/h3&gt;&lt;p&gt;Memcached于1.2.4版本新增CAS(Check and Set)协议类同于Java
      
    
    </summary>
    
      <category term="works" scheme="http://yyg.wiki/categories/works/"/>
    
    
      <category term="Memcache" scheme="http://yyg.wiki/tags/Memcache/"/>
    
  </entry>
  
  <entry>
    <title>PHP7.1.0 安装 redis 以及 php-redis扩展</title>
    <link href="http://yyg.wiki/2018/04/27/PHP7-1-0-%E5%AE%89%E8%A3%85-redis-%E4%BB%A5%E5%8F%8A-php-redis%E6%89%A9%E5%B1%95/"/>
    <id>http://yyg.wiki/2018/04/27/PHP7-1-0-安装-redis-以及-php-redis扩展/</id>
    <published>2018-04-27T02:01:16.000Z</published>
    <updated>2018-04-27T02:03:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>今日安装 PHP7.1.0 以后 需要重新安装 redis 以及 php-redis扩展，做记录以备忘。<br>到redis官网下载 redis 3.2.6 后解压到指定目录<br>阅读README文件后发现 redis已经是configure好的  直接运行 make install 就可以。<br>安装成功以后 跟据README文件知道  可以直接运行/untis/install_server.sh进行后续的配置<br>可以设置端口 log日志 数据保存位置 配置文件等选项<br>设置完毕以后自动启动服务信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Selected config:</span><br><span class="line">Port           : 6379</span><br><span class="line">Config file    : /etc/redis.conf</span><br><span class="line">Log file       : /usr/local/lnmp/redis/log/redis_6379.log</span><br><span class="line">Data dir       : /usr/local/lnmp/redis/6379</span><br><span class="line">Executable     : /usr/local/bin/redis-server</span><br><span class="line">Cli Executable : /usr/local/bin/redis-cli</span><br><span class="line">Is this ok? Then press ENTER to go on or Ctrl-C to abort.</span><br><span class="line">Copied /tmp/6379.conf =&gt; /etc/init.d/redis_6379</span><br><span class="line">Installing service...</span><br><span class="line">Success!</span><br><span class="line">Starting Redis server...</span><br><span class="line">Installation successful!</span><br></pre></td></tr></table></figure></p><p>redis安装完毕！！！</p><p>PHP-redis扩展安装：<br>到<a href="http://pecl.php.net搜索最新的php-redis扩展" target="_blank" rel="noopener">http://pecl.php.net搜索最新的php-redis扩展</a><br>解压到指定目录后</p><blockquote><p>sudo ./configure –with-php-config=/usr/local/lnmp/php/bin/php-config<br>sudo make &amp;&amp; sudo make install<br>得到生成的.so文件位置<br>/usr/local/lnmp/php/lib/php/extensions/no-debug-non-zts-20160303/redis.so</p></blockquote><p>修改php.ini 完毕！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今日安装 PHP7.1.0 以后 需要重新安装 redis 以及 php-redis扩展，做记录以备忘。&lt;br&gt;到redis官网下载 redis 3.2.6 后解压到指定目录&lt;br&gt;阅读README文件后发现 redis已经是configure好的  直接运行 make i
      
    
    </summary>
    
    
      <category term="PHP" scheme="http://yyg.wiki/tags/PHP/"/>
    
      <category term="Redis" scheme="http://yyg.wiki/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04.1LTS 下PHP7.1.0编译安装时提示 Makefile:288: recipe for target &#39;sapi/cli/php&#39; failed 及 undefined reference to &#39;XpmLibraryVersion&#39;错误解决(原创)</title>
    <link href="http://yyg.wiki/2018/04/27/Ubuntu16-04-1LTS-%E4%B8%8BPHP7-1-0%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E6%97%B6%E6%8F%90%E7%A4%BA-Makefile-288-recipe-for-target-sapi-cli-php-failed-%E5%8F%8A-undefined-reference-to-XpmLibraryVersion-%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3-%E5%8E%9F%E5%88%9B/"/>
    <id>http://yyg.wiki/2018/04/27/Ubuntu16-04-1LTS-下PHP7-1-0编译安装时提示-Makefile-288-recipe-for-target-sapi-cli-php-failed-及-undefined-reference-to-XpmLibraryVersion-错误解决-原创/</id>
    <published>2018-04-27T01:54:50.000Z</published>
    <updated>2018-04-27T01:56:31.918Z</updated>
    
    <content type="html"><![CDATA[<p>编译安装最新的PHP7.1.0时 出现了 gd库相关的错误提示 提示信息显示时缺少 libXpm 相关依赖，<br>首先是报错 ”<strong>gd.c:57:22: fatal error: X11/xpm.h: 没有那个文件或目录</strong>“<br>通过快捷安装 sudo apt install libxpm-dev 安装依赖后<br>报错  <strong>Makefile:288: recipe for target ‘sapi/cli/php’ failed</strong><br>查看了一下本机<br>/usr/share/doc/ 及 /usr/share/doc/libxpm-dev/libxpm-dev/ 两个目录，<br> 两个与libxpm有关联的文件分别为 libxpm4 及 libxpm-dev 上网查了一下 这两个文件属于映射镜像 编译PHP时无法满足依赖关系。<br>所以会出现 <strong>‘sapi/cli/php’ failed</strong> 或者  <strong>undefined reference to `XpmLibraryVersion</strong> 等错误提示<br>网上搜索时都是互相抄袭的“修改MakeFile中的 88行 77行“云云的说法  试验后没有任何作用 浪费时间<br>最后根据编译时报错信息锁定问题是处在 gd库相关的Xpm依赖， 所以下载了libXpm源码包安装后   编译PHP时需要 加上一行 “ –with-xpm-dir=/usr/local/lnmp/libxpm” 问题解决。<br>附上编译命令备忘<br>sudo ./configure –prefix=/usr/local/lnmp/php –with-config-file-path=/usr/local/lnmp/php/etc –with-pdo-mysql –with-mysql –with-mysqli –with-libxml-dir=/usr/local/lnmp/libxml2 –with-png-dir=/usr/local/lnmp/libpng –with-jpeg-dir=/usr/local/lnmp/jpeg9 –with-freetype-dir=/usr/local/lnmp/freetype –with-gd=/usr/local/lnmp/libgd –with-mcrypt=/usr/local/lnmp/libmcrypt –with-curl=/usr/local/lnmp/curl –with-xpm-dir=/usr/local/lnmp/libxpm –with-openssl –with-mhash –with-zlib –enable-soap –enable-mbstring=all –enable-sockets –enable-fpm –enable-mbstring –enable-pcntl –enable-bcmath –enable-shmop –enable-sysvsem –enable-inline-optimization –enable-xml –enable-mbregex –enable-zip –enable-opcache=no</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编译安装最新的PHP7.1.0时 出现了 gd库相关的错误提示 提示信息显示时缺少 libXpm 相关依赖，&lt;br&gt;首先是报错 ”&lt;strong&gt;gd.c:57:22: fatal error: X11/xpm.h: 没有那个文件或目录&lt;/strong&gt;“&lt;br&gt;通过快捷安
      
    
    </summary>
    
    
      <category term="PHP" scheme="http://yyg.wiki/tags/PHP/"/>
    
      <category term="Linux" scheme="http://yyg.wiki/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 1.8.1 + PHP 7.0.5 环境下PHP语法错误导致服务器报500错误解决办法 </title>
    <link href="http://yyg.wiki/2018/04/27/Nginx-1-8-1-PHP-7-0-5-%E7%8E%AF%E5%A2%83%E4%B8%8BPHP%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF%E5%AF%BC%E8%87%B4%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8A%A5500%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yyg.wiki/2018/04/27/Nginx-1-8-1-PHP-7-0-5-环境下PHP语法错误导致服务器报500错误解决办法/</id>
    <published>2018-04-27T00:47:42.000Z</published>
    <updated>2018-04-27T00:48:36.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在尝试搭建新版本的lnmp环境后发现一个问题："><a href="#在尝试搭建新版本的lnmp环境后发现一个问题：" class="headerlink" title="在尝试搭建新版本的lnmp环境后发现一个问题："></a>在尝试搭建新版本的lnmp环境后发现一个问题：</h2><p>php脚本中的语法错误会导致Nginx服务器直接返回状态码500；查看相关资料后解决办法很简单。<br>方法如下:<br>因为Nginx服务器是通过fastcgi与php进行通信的，所以如果在php的配置文件中<code>disable_error=false;</code>(php7以下版本)的话就会导致服务器直接返回500错误。<br>在php 7.0.5中的配置参数有略微变化<code>;php_flag[display_errors] = off</code>默认设置是并未开启状态 而且默认值是<code>off</code> 将前面注释的分号去掉并修改<code>off</code>为<code>on</code> 然后重新启动php-fpm后问题解决</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;在尝试搭建新版本的lnmp环境后发现一个问题：&quot;&gt;&lt;a href=&quot;#在尝试搭建新版本的lnmp环境后发现一个问题：&quot; class=&quot;headerlink&quot; title=&quot;在尝试搭建新版本的lnmp环境后发现一个问题：&quot;&gt;&lt;/a&gt;在尝试搭建新版本的lnmp环境后发
      
    
    </summary>
    
      <category term="works" scheme="http://yyg.wiki/categories/works/"/>
    
    
      <category term="PHP" scheme="http://yyg.wiki/tags/PHP/"/>
    
      <category term="Nginx" scheme="http://yyg.wiki/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>MySql 5.7.11编译安装过程记录（个人开发级别 原创）</title>
    <link href="http://yyg.wiki/2018/04/27/MySQL-5-7-11%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%AA%E4%BA%BA%E5%BC%80%E5%8F%91%E7%BA%A7%E5%88%AB-%E5%8E%9F%E5%88%9B%EF%BC%89/"/>
    <id>http://yyg.wiki/2018/04/27/MySQL-5-7-11编译安装过程记录（个人开发级别-原创）/</id>
    <published>2018-04-27T00:45:51.000Z</published>
    <updated>2018-05-07T03:44:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到各个论坛可技术相关网站，许多文章都在谈论MySQL5.7版本与之前的5.6 或 5.5 有很大的性能提升而且具体的编译方式也有许多变动，所以在本地虚拟机中尝试编译安装后 体验一下不同之处。<br>！！！ 安装过程中不合理的地方，欢迎批评指正，本人非常珍惜增长知识，改善不足的机会！！！<br>(原创文档，转载请注明！)<br><strong>系统环境：Ubuntu14.04LTS</strong><br><strong>MySql版本：5.7.11</strong><br>首先到官网下载MySql源码包：<a href="http://www.mysql.com/downloads/" target="_blank" rel="noopener">http://www.mysql.com/downloads/</a><br>然后解压到 <code>/usr/local/src/</code>目录下<br><img src="https://cloud.githubusercontent.com/assets/9836394/14550910/c02f5346-02ff-11e6-82fb-08481a315f55.png" alt="tar"></p><blockquote><p>tar -zxvf mysql-5.7.11.tar.gz -C /usr/local/src<br>cd /usr/local/src/mysql-5.7.11</p></blockquote><h4 id="然后按照5-5版本的方式执行cmake（从5-5以后-不再使用configure进行编译）"><a href="#然后按照5-5版本的方式执行cmake（从5-5以后-不再使用configure进行编译）" class="headerlink" title="然后按照5.5版本的方式执行cmake（从5.5以后 不再使用configure进行编译）"></a>然后按照5.5版本的方式执行cmake（从5.5以后 不再使用configure进行编译）</h4><blockquote><p>cmake -DCMAKE_INSTALL_PREFIX=/usr/local/lnmp/mysql - DMYSQL_DATADIR=/usr/local/lnmp/mysql/data -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_READLINE=1 -DWITH_SSL=bundled -DWITH_EMBEDDED_SERVER=1 -DENABLED_LOCAL_INFILE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITHOUT_PARTITION_STORAGE_ENGINE=1 -DWITH_DEBUG=0</p></blockquote><h4 id="但是执行之后发现存在错误"><a href="#但是执行之后发现存在错误" class="headerlink" title="但是执行之后发现存在错误"></a>但是执行之后发现存在错误</h4><p><img src="https://cloud.githubusercontent.com/assets/9836394/14551012/b40b4d9e-0300-11e6-9893-218793f969eb.png" alt="boost"></p><h4 id="查找错误根源发现MySQL5-6以后的版本需要用到Boost库（Boost库是一个可移植、提供源代码的C-库）下载了最新的Boost-1-60版本后解压到-usr-local-src-目录并指定cmake参数后从新编译"><a href="#查找错误根源发现MySQL5-6以后的版本需要用到Boost库（Boost库是一个可移植、提供源代码的C-库）下载了最新的Boost-1-60版本后解压到-usr-local-src-目录并指定cmake参数后从新编译" class="headerlink" title="查找错误根源发现MySQL5.6以后的版本需要用到Boost库（Boost库是一个可移植、提供源代码的C++库）下载了最新的Boost-1.60版本后解压到 /usr/local/src/目录并指定cmake参数后从新编译"></a>查找错误根源发现MySQL5.6以后的版本需要用到Boost库（Boost库是一个可移植、提供源代码的C++库）下载了最新的Boost-1.60版本后解压到 <code>/usr/local/src/</code>目录并指定cmake参数后从新编译</h4><h4 id="具体的cmake参数可以参见MySQL官网"><a href="#具体的cmake参数可以参见MySQL官网" class="headerlink" title="具体的cmake参数可以参见MySQL官网"></a><a href="https://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html" target="_blank" rel="noopener">具体的cmake参数可以参见MySQL官网</a></h4><blockquote><p>cmake -DCMAKE_INSTALL_PREFIX=/usr/local/lnmp/mysql  -DMYSQL_DATADIR=/usr/local/lnmp/mysql/data -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_READLINE=1 -DWITH_SSL=bundled -DWITH_EMBEDDED_SERVER=1 -DENABLED_LOCAL_INFILE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITHOUT_PARTITION_STORAGE_ENGINE=1 -DWITH_DEBUG=0 -DWITH_BOOST=/usr/local/src/boost_1_60_0</p></blockquote><h4 id="但是运行以后发现还是有错误"><a href="#但是运行以后发现还是有错误" class="headerlink" title="但是运行以后发现还是有错误"></a>但是运行以后发现还是有错误</h4><p><img src="https://cloud.githubusercontent.com/assets/9836394/14552085/5e6fe324-030d-11e6-9025-1935c2a6552e.png" alt="boost16"></p><h4 id="之后试验了几次其他版本的Boost-1-55-1-56…-最后证明只有1-59版本的Boost包才可以，下载"><a href="#之后试验了几次其他版本的Boost-1-55-1-56…-最后证明只有1-59版本的Boost包才可以，下载" class="headerlink" title="之后试验了几次其他版本的Boost 1.55 1.56… 最后证明只有1.59版本的Boost包才可以，下载"></a>之后试验了几次其他版本的Boost 1.55 1.56… 最后证明只有1.59版本的Boost包才可以，下载</h4><p>Boost_1.59版本并解压到<code>/usr/local/src/</code>目录重新执行cmake编译命令</p><blockquote><p>cmake -DCMAKE_INSTALL_PREFIX=/usr/local/lnmp/mysql  -DMYSQL_DATADIR=/usr/local/lnmp/mysql/data -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_READLINE=1 -DWITH_SSL=bundled -DWITH_EMBEDDED_SERVER=1 -DENABLED_LOCAL_INFILE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITHOUT_PARTITION_STORAGE_ENGINE=1 -DWITH_DEBUG=0 -DWITH_BOOST=/usr/local/src/boost_1_59_0</p></blockquote><p><img src="https://cloud.githubusercontent.com/assets/9836394/14552150/04d2f490-030e-11e6-8a9c-978b86ce3696.png" alt="makeover"></p><h4 id="发现这次没有了明显的错误提示-执行-make-amp-amp-make-install-命令-并等待检测和安装完毕。"><a href="#发现这次没有了明显的错误提示-执行-make-amp-amp-make-install-命令-并等待检测和安装完毕。" class="headerlink" title="发现这次没有了明显的错误提示,执行 make &amp;&amp; make install 命令 并等待检测和安装完毕。"></a>发现这次没有了明显的错误提示,执行 <code>make &amp;&amp; make install</code> 命令 并等待检测和安装完毕。</h4><p>第一次尝试检测并安装的时候出现过一次错误 提示需要安装 libncurses5-dev 依赖库<br>直接执行了<code>atpt-get install -y libncurses5-dev</code>安装依赖之后一切正常。<br>(时间比较久，可以去抽支烟、去趟洗手间、和妹子聊聊天 呵呵！)</p><h4 id="安装完毕以后进入MySQL安装目录-目录结构图下"><a href="#安装完毕以后进入MySQL安装目录-目录结构图下" class="headerlink" title="安装完毕以后进入MySQL安装目录 目录结构图下"></a>安装完毕以后进入MySQL安装目录 目录结构图下</h4><p><img src="https://cloud.githubusercontent.com/assets/9836394/14552758/7d4f91d0-0313-11e6-98fb-0ce85ceab4e0.png" alt="dir"></p><h4 id="创建mysql用户及用户组"><a href="#创建mysql用户及用户组" class="headerlink" title="创建mysql用户及用户组"></a>创建mysql用户及用户组</h4><blockquote><p>sudo groupadd mysql<br>sudo useradd -r -g mysql mysql</p></blockquote><h4 id="权限设置及授权"><a href="#权限设置及授权" class="headerlink" title="权限设置及授权"></a>权限设置及授权</h4><blockquote><p>cd /usr/local/mysql<br>sudo chown -R mysql .<br>sudo chgrp -R mysql .<br>sudo chown -R root .</p></blockquote><h4 id="copy配置文件-并设置配置文件"><a href="#copy配置文件-并设置配置文件" class="headerlink" title="copy配置文件 并设置配置文件"></a>copy配置文件 并设置配置文件</h4><blockquote><p>cp support-files/my-default.cnf /etc/my.cnf<br>vim /etc/my.cnf</p></blockquote><p><img src="https://cloud.githubusercontent.com/assets/9836394/14557103/22714b6c-032e-11e6-89e9-91711df2c756.png" alt="image"></p><h4 id="注意-MySQL5-5的时候用命令sudo-scripts-mysql-install-db-user-mysql-还有-bin-mysqld-safe-user-mysql-amp-配置MySQL，但是5-6以后要使用-bin-mysqld-safe-initialize-user-mysql-amp-来配置和启动"><a href="#注意-MySQL5-5的时候用命令sudo-scripts-mysql-install-db-user-mysql-还有-bin-mysqld-safe-user-mysql-amp-配置MySQL，但是5-6以后要使用-bin-mysqld-safe-initialize-user-mysql-amp-来配置和启动" class="headerlink" title="注意 MySQL5.5的时候用命令sudo scripts/mysql_install_db --user=mysql 还有 ./bin/mysqld_safe --user=mysql &amp; 配置MySQL，但是5.6以后要使用 ./bin/mysqld_safe --initialize --user=mysql &amp;来配置和启动."></a>注意 MySQL5.5的时候用命令<code>sudo scripts/mysql_install_db --user=mysql</code> 还有 <code>./bin/mysqld_safe --user=mysql &amp;</code> 配置MySQL，但是5.6以后要使用 <code>./bin/mysqld_safe --initialize --user=mysql &amp;</code>来配置和启动.</h4><h4 id="执行initialize的时候-会提示"><a href="#执行initialize的时候-会提示" class="headerlink" title="执行initialize的时候 会提示"></a>执行initialize的时候 会提示</h4><p><img src="https://cloud.githubusercontent.com/assets/9836394/14553490/7907a77e-0319-11e6-8253-7ca6e5725de6.png" alt="image"></p><h4 id="查找解决办法是在MySQL配置文件-这里是-etc-my-cnf中添加一行-explicit-defaults-for-timestamp-1"><a href="#查找解决办法是在MySQL配置文件-这里是-etc-my-cnf中添加一行-explicit-defaults-for-timestamp-1" class="headerlink" title="查找解决办法是在MySQL配置文件 这里是/etc/my.cnf中添加一行 explicit_defaults_for_timestamp = 1"></a>查找解决办法是在MySQL配置文件 这里是<code>/etc/my.cnf</code>中添加一行 <code>explicit_defaults_for_timestamp = 1</code></h4><h4 id="然后初始化密码以及生成data目录"><a href="#然后初始化密码以及生成data目录" class="headerlink" title="然后初始化密码以及生成data目录"></a>然后初始化密码以及生成data目录</h4><p><img src="https://cloud.githubusercontent.com/assets/9836394/14556890/09274d7e-032d-11e6-8a5c-c72f31c3a84f.png" alt="image"><br>（注意最后一行的初始登录密码）</p><h4 id="然后启动mysql-服务-bin-mysqld-defaults-file-etc-my-cnf-user-mysql-amp"><a href="#然后启动mysql-服务-bin-mysqld-defaults-file-etc-my-cnf-user-mysql-amp" class="headerlink" title="然后启动mysql 服务 ./bin/mysqld --defaults-file=/etc/my.cnf --user=mysql &amp;"></a>然后启动mysql 服务 <code>./bin/mysqld --defaults-file=/etc/my.cnf --user=mysql &amp;</code></h4><p><img src="https://cloud.githubusercontent.com/assets/9836394/14557067/f0540f16-032d-11e6-8de5-0cd8deac3669.png" alt="image"></p><h4 id="启动服务后使用命令-netstat-tnlp-grep-mysql或-ps-ef-grep-mysql查看是否启动成功"><a href="#启动服务后使用命令-netstat-tnlp-grep-mysql或-ps-ef-grep-mysql查看是否启动成功" class="headerlink" title="启动服务后使用命令 netstat -tnlp|grep mysql或 ps -ef|grep mysql查看是否启动成功"></a>启动服务后使用命令 <code>netstat -tnlp|grep mysql</code>或 <code>ps -ef|grep mysql</code>查看是否启动成功</h4><p><img src="https://cloud.githubusercontent.com/assets/9836394/14557175/8df70d54-032e-11e6-9364-87beb59b5bba.png" alt="image"></p><h4 id="使用之前初始化后自动生成的初始密码登录-mysql"><a href="#使用之前初始化后自动生成的初始密码登录-mysql" class="headerlink" title="使用之前初始化后自动生成的初始密码登录 mysql"></a>使用之前初始化后自动生成的初始密码登录 mysql</h4><p><img src="https://cloud.githubusercontent.com/assets/9836394/14557204/aeaa110e-032e-11e6-996c-10ee6fa55ecc.png" alt="image"></p><h4 id="成功登录后-修改root的密码-与之前5-5一下版本不同的是-设置密码不再使用-SET-PASSWORD-FOR-39-root-39-39-localhost-39-PASSWORD-39-123456-39-这个命令了。现在使用新的命令来设置密码-ALTER-USER-39-root-39-39-localhost-39-IDENTIFIED-BY-39-new-password-39"><a href="#成功登录后-修改root的密码-与之前5-5一下版本不同的是-设置密码不再使用-SET-PASSWORD-FOR-39-root-39-39-localhost-39-PASSWORD-39-123456-39-这个命令了。现在使用新的命令来设置密码-ALTER-USER-39-root-39-39-localhost-39-IDENTIFIED-BY-39-new-password-39" class="headerlink" title="成功登录后 修改root的密码 与之前5.5一下版本不同的是 设置密码不再使用 SET PASSWORD FOR &#39;root&#39;@&#39;localhost&#39;=PASSWORD(&#39;123456&#39;); 这个命令了。现在使用新的命令来设置密码 ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;new_password&#39;;"></a>成功登录后 修改root的密码 与之前5.5一下版本不同的是 设置密码不再使用 <code>SET PASSWORD FOR &#39;root&#39;@&#39;localhost&#39;=PASSWORD(&#39;123456&#39;);</code> 这个命令了。现在使用新的命令来设置密码 <code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;new_password&#39;;</code></h4><p><img src="https://cloud.githubusercontent.com/assets/9836394/14557322/52a2ae6a-032f-11e6-973c-55bdb12ab21e.png" alt="image"></p><h4 id="查看mysql-的-user表-还有一个发现-，新版本不会像之前老的版本一样有很多的user字段为空的用户了-只有2个用户"><a href="#查看mysql-的-user表-还有一个发现-，新版本不会像之前老的版本一样有很多的user字段为空的用户了-只有2个用户" class="headerlink" title="查看mysql 的 user表 还有一个发现 ，新版本不会像之前老的版本一样有很多的user字段为空的用户了  只有2个用户"></a>查看mysql 的 user表 还有一个发现 ，新版本不会像之前老的版本一样有很多的user字段为空的用户了  只有2个用户</h4><p><img src="https://cloud.githubusercontent.com/assets/9836394/14557425/e24bc272-032f-11e6-89a8-fa062c1c760a.png" alt="image"></p><h4 id="如果需要设置开机自启动的话执行"><a href="#如果需要设置开机自启动的话执行" class="headerlink" title="如果需要设置开机自启动的话执行"></a>如果需要设置开机自启动的话执行</h4><blockquote><p>cp support-files/mysql.server /etc/init.d/mysql<br>  update-rc.d mysql defaults</p></blockquote><h4 id="就此基本大功告成了！-关于具体的mysql配置就不再这研究了，依个人需要修改就可以。安装过程中有不少waring没有在意，对于不合理的地方欢迎指正，我会非常感谢这个学习的机会"><a href="#就此基本大功告成了！-关于具体的mysql配置就不再这研究了，依个人需要修改就可以。安装过程中有不少waring没有在意，对于不合理的地方欢迎指正，我会非常感谢这个学习的机会" class="headerlink" title="就此基本大功告成了！ 关于具体的mysql配置就不再这研究了，依个人需要修改就可以。安装过程中有不少waring没有在意，对于不合理的地方欢迎指正，我会非常感谢这个学习的机会."></a>就此基本大功告成了！ 关于具体的mysql配置就不再这研究了，依个人需要修改就可以。安装过程中有不少waring没有在意，对于不合理的地方欢迎指正，我会非常感谢这个学习的机会.</h4><p>参考资料：<a href="http://dev.mysql.com/doc/refman/5.7/en/installing.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.7/en/installing.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近看到各个论坛可技术相关网站，许多文章都在谈论MySQL5.7版本与之前的5.6 或 5.5 有很大的性能提升而且具体的编译方式也有许多变动，所以在本地虚拟机中尝试编译安装后 体验一下不同之处。&lt;br&gt;！！！ 安装过程中不合理的地方，欢迎批评指正，本人非常珍惜增长知识，改
      
    
    </summary>
    
      <category term="works" scheme="http://yyg.wiki/categories/works/"/>
    
    
      <category term="Linux" scheme="http://yyg.wiki/tags/Linux/"/>
    
      <category term="MySql" scheme="http://yyg.wiki/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>Linux passwd文件格式解析</title>
    <link href="http://yyg.wiki/2018/04/27/Linux-passwd%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90/"/>
    <id>http://yyg.wiki/2018/04/27/Linux-passwd文件格式解析/</id>
    <published>2018-04-27T00:41:39.000Z</published>
    <updated>2018-04-27T00:43:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-etc-passwd"><a href="#一、-etc-passwd" class="headerlink" title="一、/etc/passwd"></a>一、/etc/passwd</h2><p>/etc/passwd 文件是一个纯文本文件，每行采用了相同的格式：<br>name:password:uid:gid:comment:home:shell<br>name 用户登录名<br>password 用户口令。此域中的口令是加密的,常用x表示。当用户登录系统时，系统对输入的口令采取相同的算法，与此域中的内容进行比较。如果此域为空，表明该用户登录时不需要口令。<br>uid 指定用户的 UID。用户登录进系统后，系统通过该值，而不是用户名来识别用户。<br>gid GID。如果系统要对相同的一群人赋予相同的权利，则使用该值。<br>comment 用来保存用户的真实姓名和个人细节，或者全名。<br>home 指定用户的主目录的绝对路径。<br>shell 如果用户登录成功，则要执行的命令的绝对路径放在这一区域中。它可以是任何命令。<br>如果/etc/passwd文件存放的是用户的信息，由6个分号组成的7个信息，解释如下<br>（1）：用户名。<br>（2）：密码（已经加密）<br>（3）：UID（用户标识）,操作系统自己用的<br>（4）：GID组标识。<br>（5）：用户全名或本地帐号<br>（6）：开始目录<br>（7）：登录使用的Shell，就是对登录命令进行解析的工具。<br>例如：abc : x : 501 : 501 : /home/abc : /bin/bash </p><h2 id="二、-etc-shadow"><a href="#二、-etc-shadow" class="headerlink" title="二、/etc/shadow"></a>二、/etc/shadow</h2><p>如果查看/etc/shadow文件存放的特殊帐号信息如下：<br>name:!!:13675:0:99999:7:::<br>每一行给一个特殊帐户定义密码信息，每个字段用 : 隔开。<br>字段 1 定义与这个 shadow 条目相关联的特殊用户帐户。<br>字段 2 包含一个加密的密码。<br>字段 3 自 1/1/1970 起，密码被修改的天数<br>字段 4 密码将被允许修改之前的天数（0 表示“可在任何时间修改”）<br>字段 5 系统将强制用户修改为新密码之前的天数（1 表示“永远都不能修改”）<br>字段 6 密码过期之前，用户将被警告过期的天数（-1 表示“没有警告”）<br>字段 7 密码过期之后，系统自动禁用帐户的天数（-1 表示“永远不会禁用”）<br>字段 8 该帐户被禁用的天数（-1 表示“该帐户被启用”）<br>字段 9 保留供将来使用</p><p>如果查看/etc/shadow下存放的普通帐号信息如下：<br>（1）：帐号名称<br>（2）：密码：这里是加密过的，但高手也可以解密的。要主要安全问题（代！符号标识该帐号不能用来登录）<br>（3）：上次修改密码的日期<br>（4）：密码不可被变更的天数<br>（5）：密码需要被重新变更的天数（99999表示不需要变更）<br>（6）：密码变更前提前几天警告<br>（7）：帐号失效日期<br>（8）：帐号取消日期<br>（9）：保留条目，目前没用<br>例如：abc:!!:14768:0:99999:7:::<br>转自 <a href="http://blog.chinaunix.net/uid-22117760-id-264606.html" target="_blank" rel="noopener">http://blog.chinaunix.net/uid-22117760-id-264606.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、-etc-passwd&quot;&gt;&lt;a href=&quot;#一、-etc-passwd&quot; class=&quot;headerlink&quot; title=&quot;一、/etc/passwd&quot;&gt;&lt;/a&gt;一、/etc/passwd&lt;/h2&gt;&lt;p&gt;/etc/passwd 文件是一个纯文本文件，每行采
      
    
    </summary>
    
      <category term="works" scheme="http://yyg.wiki/categories/works/"/>
    
    
      <category term="Linux" scheme="http://yyg.wiki/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>初步了解 Nginx unix domain socket 与 TCP socket 区别(原创)</title>
    <link href="http://yyg.wiki/2018/04/26/%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3-Nginx-unix-domain-socket-%E4%B8%8E-TCP-socket-%E5%8C%BA%E5%88%AB-%E5%8E%9F%E5%88%9B/"/>
    <id>http://yyg.wiki/2018/04/26/初步了解-Nginx-unix-domain-socket-与-TCP-socket-区别-原创/</id>
    <published>2018-04-26T08:07:06.000Z</published>
    <updated>2018-04-26T08:08:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>（属于个人的粗浅了解，如有纰漏 欢迎指正）<br>在编译安装Nginx的时候，我想绝大多数的人会在网上查阅各种安装与配置的文档，当然我也不例外。但是在配置php-fpm与Nginx交互的socket方式时产生了一个疑问，因为有的文档上写着应该这样配置：</p><blockquote><p>fastcgi_pass   127.0.0.1:9000;</p></blockquote><p>而有的文档上却又写着：</p><blockquote><p>fastcgi_pass   unix:/var/run/php-fpm/php-fpm.sock</p></blockquote><p>疑惑丛生，为什么会有两种不同的设置方式？ 他们之间孰优孰劣？ 优在哪？ 劣又在哪？</p><p>诸多疑问使我又google、百度了很多篇文章 而综合 stackoverflow，知乎等比较靠谱一点的网站的源文档（并非那些复制粘贴而来，人与亦云的文档）后总结了以下几点：</p><p>1.采用unix domain socket方式 在访问量不是很大的情况下速度要比TCP的方式效率高一些，虽然一般情况下php与nginx服务都在本地，localhost或者 127.0.0.1也是做本地环回，但是因为不走TCP协议所以unix domain socket 的效率较高。但是稳定性不如TCP。</p><p>2.unix domain socket结合长链接配置，可以有效提高端口的复用率，明显提升服务器效率。但是在访问量较大时采用TCP与短链接会更好的应对并发请求，而且更加稳定（长链接可能会产生阻塞）。</p><p>3.unix domain socket 与TCP socket相比，前者只适合本地服务之间的通信，所以便于迁移性不如后者，因为迁移服务器时只需要设置新的ip地址与对应端口即可.</p><p>综上所述如果是仅仅用于个人开发的话 二者没有区别 但是如果是配置服务器或反向代理的话，就要根据具体情况选择性的进行设置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;（属于个人的粗浅了解，如有纰漏 欢迎指正）&lt;br&gt;在编译安装Nginx的时候，我想绝大多数的人会在网上查阅各种安装与配置的文档，当然我也不例外。但是在配置php-fpm与Nginx交互的socket方式时产生了一个疑问，因为有的文档上写着应该这样配置：&lt;/p&gt;
&lt;block
      
    
    </summary>
    
      <category term="works" scheme="http://yyg.wiki/categories/works/"/>
    
    
      <category term="Nginx" scheme="http://yyg.wiki/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Fastcgi_params 与 Fastcgi.conf --Nginx 配置的历史（译）</title>
    <link href="http://yyg.wiki/2018/04/26/Fastcgi-params-%E4%B8%8E-Fastcgi-conf-Nginx-%E9%85%8D%E7%BD%AE%E7%9A%84%E5%8E%86%E5%8F%B2%EF%BC%88%E8%AF%91%EF%BC%89/"/>
    <id>http://yyg.wiki/2018/04/26/Fastcgi-params-与-Fastcgi-conf-Nginx-配置的历史（译）/</id>
    <published>2018-04-26T08:02:03.000Z</published>
    <updated>2018-04-26T08:04:48.961Z</updated>
    
    <content type="html"><![CDATA[<p><em>\</em> 原文地址：<br> <a href="https://blog.martinfjordvald.com/2013/04/nginx-config-history-fastcgi_params-versus-fastcgi-conf/" target="_blank" rel="noopener">https://blog.martinfjordvald.com/2013/04/nginx-config-history-fastcgi_params-versus-fastcgi-conf/</a><br>（由于本人英文很差都是根据单词进行的翻译 不妥之处见谅）</p><p>正文：<br>Nginx的源码安装（通过扩展软件包管理器）包括两个FastCGI配置文件，而在conf目录内的fastcgi_params和fastcgi.conf这两个文件非常的相似。以至于现在仍然会导致新的用户在包管理的问题上产生混淆。</p><p>两个文件在源代码中的区别是：</p><p><code>fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</code></p><p>两个文件在大多数包管理库内没有区别，本质上就是将fastcgi_params与fastcgi.conf相适应。</p><p>这行代码是告诉PHP应该执行哪个文件，没有这一项设置的话Nginx和PHP就不能一起工作。这行代码看起来能够很好的为Nginx指定Fastcgi的配置文件，Lgor Sysoev（Nginx开发者）也确实是这样设想的。然而，在配置时却不是简简单单的添加这行代码。</p><p>在0.6.x版本的时代， 也就是几年以前在我刚刚开始使用Nginx的时候，这一典型的变化在配置文件举例中看起来确实是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    include fastcgi_params;</span><br><span class="line">    fastcgi_param SCRIPT_FILENAME /var/www/foo$fastcgi_script_name;</span><br><span class="line">   fastcgi_pass backend;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于维基人在社区中积极的倡导，开发者不再将<code>root path</code>的设置写死，而渐渐的开始使用  <code>$document_root</code>来设置<code>root path</code> ，然而，很多人许多年后仍然还在使用这样的配置。</p><p>由于<a href="https://blog.martinfjordvald.com/2012/08/understanding-the-nginx-configuration-inheritance-model/" target="_blank" rel="noopener">数组指令的继承与交互</a>，开发者沿用旧的配置方式不可能在<code>fastcig_gram</code>中包含这行代码。这样做意味着<code>SCRIPT_FILENAME</code>将被重复定义，并且都将被发送到后端而引起冲突。</p><p>在0.8.30版本(2009年12月15日发布),Lgor包含了和<code>fastcgi_params</code>一模一样的<code>fastcgi.conf</code>文件，但并没有改进<code>SCRIPT_FILENAME fastcgi_param</code>。这意味着社区可以推荐开发者采用包含<code>fastcgi.conf</code><br>文件的方式来取代将<code>SCRIPT_FILENAME</code>添加到<code>fastcgi.conf</code>的方式，在维基上的文章绝大多数都是这样，我们在网络上的倡导也慢慢的使大多数受欢迎的文章推荐这样去设置。</p><p>当然，这个问题的背后是当时的包管理对Nginx许多版本的支持太少。通常来说0.6.x 与0.8x版本。许多人是不加载<code>fastcgi.conf</code>文件的。当他们最终选择升级他们的<code>fastcgi.conf</code> 并修改<code>fastcgi_params</code>时出现了一个情况,就是源码安装不同于库安装在不是非常重要的方式中。偶尔在IRC上还是会引起困惑。</p><p>我实际上更喜欢：<br><code>fastcgi_param SCRIPT_FILENAME $request_filename;</code></p><p>有人参考<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#alias" target="_blank" rel="noopener">指令别名</a>来配置<code>fastcgi_new.conf</code>吗？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;\&lt;/em&gt; 原文地址：&lt;br&gt; &lt;a href=&quot;https://blog.martinfjordvald.com/2013/04/nginx-config-history-fastcgi_params-versus-fastcgi-conf/&quot; target=&quot;
      
    
    </summary>
    
      <category term="works" scheme="http://yyg.wiki/categories/works/"/>
    
    
      <category term="Nginx" scheme="http://yyg.wiki/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>ECMALL session跨域实现解析 原创</title>
    <link href="http://yyg.wiki/2018/04/26/ECMALL-session%E8%B7%A8%E5%9F%9F%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90-%E5%8E%9F%E5%88%9B/"/>
    <id>http://yyg.wiki/2018/04/26/ECMALL-session跨域实现解析-原创/</id>
    <published>2018-04-26T07:58:33.000Z</published>
    <updated>2018-04-26T08:00:06.329Z</updated>
    
    <content type="html"><![CDATA[<h4 id="ECMALL-session跨域实现"><a href="#ECMALL-session跨域实现" class="headerlink" title="ECMALL session跨域实现"></a>ECMALL session跨域实现</h4><p>应用举例: 在data/config.inc.php 中 设置COOKIE_DOMAIN cookie作用域为 .ljlj.cc 后,在 mall.ljlj.cc用户登录后 在 products.ljlj.cc中可以获取到cookie中 ECM_ID.<br>以ECM_ID前32为字符串为主键 到 ecm_sessions数据表中即可查询到mall.ljlj.cc登录用户的session信息<br>session 核心文件<br>文件位置: includes/libraries/session.lib.php 定义session类 SessionProcessor</p><p>类中构造函数调用SessionProcessor()方法自定义了ecmall自己的session会话规则<br>(1) 自定义session会话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">session_set_save_handler(   </span><br><span class="line"></span><br><span class="line">array (&amp; $this, &quot;_sess_open&quot;),在运行session_start()时执行</span><br><span class="line"></span><br><span class="line">array (&amp; $this, &quot;_sess_close&quot;),所有session操作完后被执行 </span><br><span class="line"></span><br><span class="line">array (&amp; $this, &quot;_sess_read&quot;),在运行session_start()时执行,因为在session_start时,会去read当前session数据</span><br><span class="line"></span><br><span class="line">array (&amp; $this, &quot;_sess_write&quot;),此方法在脚本结束和使用session_write_close()强制提交SESSION数据时执行</span><br><span class="line"></span><br><span class="line">array (&amp; $this, &quot;_sess_destroy&quot;),在运行session_destroy()时执行</span><br><span class="line"></span><br><span class="line">array (&amp; $this, &quot;_sess_gc&quot;)时机是在open,read之后,session_start会相继执行open,read和gc</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>(2)处理session作用域 作用路径已经 过期时间 实现session跨子域 需要在data/config.inc.php中对 COOKIE_PATH(作用路径) COOKIE_DOMAIN(作用域)进行设置 例: COOKIE_DOMAIN = ‘.ljlj.cc’  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$this-&gt;gmtime = gmtime();</span><br><span class="line"></span><br><span class="line">$this-&gt;max_life_time = 1440; 过期时间</span><br><span class="line"></span><br><span class="line">$this-&gt;session_cookie_path = COOKIE_PATH;   作用路径</span><br><span class="line"></span><br><span class="line">$this-&gt;session_cookie_domain = COOKIE_DOMAIN;  作用域</span><br><span class="line"></span><br><span class="line">//如果开启二级域名,且未设置COOKIE作用域，则缺省为上级域</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">if(defined(&apos;ENABLED_SUBDOMAIN&apos;)&amp;&amp;ENABLED_SUBDOMAIN &amp;&amp; !COOKIE_DOMAIN)</span><br><span class="line">&#123;</span><br><span class="line">    $tmp_arr = parse_url(SITE_URL);</span><br><span class="line">    if (count(explode(&apos;.&apos;, $tmp_arr[&apos;host&apos;])) &gt; 2)</span><br><span class="line">    &#123;</span><br><span class="line">        $cookie_domain = substr($tmp_arr[&apos;host&apos;], strpos($tmp_arr[&apos;host&apos;], &apos;.&apos;));</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        // 形如ecmall.com这样的域名</span><br><span class="line">        $cookie_domain = &apos;.&apos; . $tmp_arr[&apos;host&apos;];</span><br><span class="line">    &#125;</span><br><span class="line">    $this-&gt;session_cookie_domain = $cookie_domain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)判断session id为空 但是cookie已经设置 直接取cookie中session id    ($session_id默认设置为空)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if($session_id==&apos;&apos;&amp;&amp; !empty($_COOKIE[$this-&gt;session_name])</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;session_id = $_COOKIE[$this-&gt;session_name];</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;session_id = $session_id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4) 如果session id存在 那么截取session id中的后8位验证字符串进行验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if ($this-&gt;session_id)</span><br><span class="line">&#123;</span><br><span class="line">    $tmp_session_id = substr($this-&gt;session_id, 0, 32);</span><br><span class="line"></span><br><span class="line">        if($this-&gt;gen_session_key($tmp_session_id)==substr($this-&gt;session_id, 32))</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;session_id = $tmp_session_id;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;session_id = &apos;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(5) 验证字符串 由gen_session_key()函数 产生<br>sprintf(‘%08x’, crc32(!empty($_SERVER[‘HTTP_USER_AGENT’]) ? $_SERVER[‘HTTP_USER_AGENT’] . ROOT_PATH . $ip . $session_id : ROOT_PATH . $ip . $session_id));</p><p>(6) 如果session id 不存在则生成新的 session_id( 32位session_id加8位验证字符串)<br>调用 gen_session_key() 产生8位16进制验证字符串拼接在session_id后面 存储在cookie中 例:  [“ECM_ID”]=&gt;  string(40) “8bfc72b2919c2d5f8db0785a24e55fd535ef3589”(后8位为验证字符串)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (!$this-&gt;session_id)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;gen_session_id(); 为$this-&gt;session_id赋值</span><br><span class="line">    session_id($this-&gt;session_id.$this-&gt;gen_session_key($this-&gt;session_id));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(7) Session_id 生成函数 gen_session_id() 生成规则为 MD5加密 uniqid(随机数)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function gen_session_id()</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;session_id = md5(uniqid(mt_rand(), true));</span><br><span class="line"></span><br><span class="line">    return $this-&gt;insert_session();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(8) insert_session()方法负责将生成的session插入数据库 db_mall库下 ecm_sessions 表 主键为sesskey (32位 session_id)</p><p>(9) _sess_write(32位session_id,用户信息)方法负责update ecm_sessions表中对应sesskey信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">登录后用户session信息 :例:captcha|s:8:&quot;Z3dydQ==&quot;;user_info|a:7:&#123;s:7:&quot;user_id&quot;;s:4:&quot;5315&quot;;s:9:&quot;user_name&quot;;s:6:&quot;wewewe&quot;;s:8:&quot;reg_time&quot;;s:10:&quot;1436267397&quot;;s:10:&quot;last_login&quot;;s:10:&quot;1436411543&quot;;s:7:&quot;last_ip&quot;;s:9:&quot;127.0.0.1&quot;;s:8:&quot;store_id&quot;;N;s:10:&quot;activation&quot;;N;</span><br></pre></td></tr></table></figure><p>退出登录后 session信息:<br>例:captcha|s:8:”Z3dydQ==”;” </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;ECMALL-session跨域实现&quot;&gt;&lt;a href=&quot;#ECMALL-session跨域实现&quot; class=&quot;headerlink&quot; title=&quot;ECMALL session跨域实现&quot;&gt;&lt;/a&gt;ECMALL session跨域实现&lt;/h4&gt;&lt;p&gt;应用举例: 
      
    
    </summary>
    
      <category term="works" scheme="http://yyg.wiki/categories/works/"/>
    
    
      <category term="PHP" scheme="http://yyg.wiki/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 配置文件 nginx.conf 中文详解（转）</title>
    <link href="http://yyg.wiki/2018/04/26/Nginx-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-nginx-conf-%E4%B8%AD%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%88%E8%BD%AC%EF%BC%89/"/>
    <id>http://yyg.wiki/2018/04/26/Nginx-配置文件-nginx-conf-中文详解（转）/</id>
    <published>2018-04-26T07:54:18.000Z</published>
    <updated>2018-04-26T07:56:31.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">#定义Nginx运行的用户和用户组</span><br><span class="line">user www www;</span><br><span class="line"></span><br><span class="line">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class="line">worker_processes 8;</span><br><span class="line"></span><br><span class="line">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class="line">error_log /var/log/nginx/error.log info;</span><br><span class="line"></span><br><span class="line">#进程文件</span><br><span class="line">pid /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line">#工作模式与连接数上限</span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class="line">use epoll;</span><br><span class="line">#单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class="line">worker_connections 65535;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#设定http服务器</span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">include mime.types; #文件扩展名与文件类型映射表</span><br><span class="line">default_type application/octet-stream; #默认文件类型</span><br><span class="line">#charset utf-8; #默认编码</span><br><span class="line">server_names_hash_bucket_size 128; #服务器名字的hash表大小</span><br><span class="line">client_header_buffer_size 32k; #上传文件大小限制</span><br><span class="line">large_client_header_buffers 4 64k; #设定请求缓</span><br><span class="line">client_max_body_size 8m; #设定请求缓</span><br><span class="line">sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class="line">autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class="line">tcp_nopush on; #防止网络阻塞</span><br><span class="line">tcp_nodelay on; #防止网络阻塞</span><br><span class="line">keepalive_timeout 120; #长连接超时时间，单位是秒</span><br><span class="line"></span><br><span class="line">#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class="line">fastcgi_connect_timeout 300;</span><br><span class="line">fastcgi_send_timeout 300;</span><br><span class="line">fastcgi_read_timeout 300;</span><br><span class="line">fastcgi_buffer_size 64k;</span><br><span class="line">fastcgi_buffers 4 64k;</span><br><span class="line">fastcgi_busy_buffers_size 128k;</span><br><span class="line">fastcgi_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line">#gzip模块设置</span><br><span class="line">gzip on; #开启gzip压缩输出</span><br><span class="line">gzip_min_length 1k; #最小压缩文件大小</span><br><span class="line">gzip_buffers 4 16k; #压缩缓冲区</span><br><span class="line">gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class="line">gzip_comp_level 2; #压缩等级</span><br><span class="line">gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class="line">#压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class="line">gzip_vary on;</span><br><span class="line">#limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用</span><br><span class="line"></span><br><span class="line">upstream blog.ha97.com &#123;</span><br><span class="line">#upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class="line">server 192.168.80.121:80 weight=3;</span><br><span class="line">server 192.168.80.122:80 weight=2;</span><br><span class="line">server 192.168.80.123:80 weight=3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#虚拟主机的配置</span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">#监听端口</span><br><span class="line">listen 80;</span><br><span class="line">#域名可以有多个，用空格隔开</span><br><span class="line">server_name www.ha97.com ha97.com;</span><br><span class="line">index index.html index.htm index.php;</span><br><span class="line">root /data/www/ha97;</span><br><span class="line">location ~ .*\.(php|php5)?$</span><br><span class="line">&#123;</span><br><span class="line">fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">fastcgi_index index.php;</span><br><span class="line">include fastcgi.conf;</span><br><span class="line">&#125;</span><br><span class="line">#图片缓存时间设置</span><br><span class="line">location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">&#123;</span><br><span class="line">expires 10d;</span><br><span class="line">&#125;</span><br><span class="line">#JS和CSS缓存时间设置</span><br><span class="line">location ~ .*\.(js|css)?$</span><br><span class="line">&#123;</span><br><span class="line">expires 1h;</span><br><span class="line">&#125;</span><br><span class="line">#日志格式设定</span><br><span class="line">log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">&apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">&apos;&quot;$http_user_agent&quot; $http_x_forwarded_for&apos;;</span><br><span class="line">#定义本虚拟主机的访问日志</span><br><span class="line">access_log /var/log/nginx/ha97access.log access;</span><br><span class="line"></span><br><span class="line">#对 &quot;/&quot; 启用反向代理</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://127.0.0.1:88;</span><br><span class="line">proxy_redirect off;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">#以下是一些反向代理的配置，可选。</span><br><span class="line">proxy_set_header Host $host;</span><br><span class="line">client_max_body_size 10m; #允许客户端请求的最大单文件字节数</span><br><span class="line">client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="line">proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class="line">proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#设定查看Nginx状态的地址</span><br><span class="line">location /NginxStatus &#123;</span><br><span class="line">stub_status on;</span><br><span class="line">access_log on;</span><br><span class="line">auth_basic &quot;NginxStatus&quot;;</span><br><span class="line">auth_basic_user_file conf/htpasswd;</span><br><span class="line">#htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#本地动静分离反向代理配置</span><br><span class="line">#所有jsp的页面均交由tomcat或resin处理</span><br><span class="line">location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class="line">proxy_set_header Host $host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_pass http://127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line">#所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class="line">location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$</span><br><span class="line">&#123; expires 15d; &#125;</span><br><span class="line">location ~ .*.(js|css)?$</span><br><span class="line">&#123; expires 1h; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转自<a href="http://www.ha97.com/5194.html" target="_blank" rel="noopener">http://www.ha97.com/5194.html</a></p><h2 id="附录-nginx-param-中文详解"><a href="#附录-nginx-param-中文详解" class="headerlink" title="附录 nginx_param 中文详解"></a>附录 nginx_param 中文详解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;#脚本文件请求的路径  </span><br><span class="line">fastcgi_param  QUERY_STRING       $query_string; #请求的参数;如?app=123  </span><br><span class="line">fastcgi_param  REQUEST_METHOD     $request_method; #请求的动作(GET,POST)  </span><br><span class="line">fastcgi_param  CONTENT_TYPE       $content_type; #请求头中的Content-Type字段  </span><br><span class="line">fastcgi_param  CONTENT_LENGTH     $content_length; #请求头中的Content-length字段。  </span><br><span class="line"></span><br><span class="line">fastcgi_param  SCRIPT_NAME        $fastcgi_script_name; #脚本名称   </span><br><span class="line">fastcgi_param  REQUEST_URI        $request_uri; #请求的地址不带参数  </span><br><span class="line">fastcgi_param  DOCUMENT_URI       $document_uri; #与$uri相同。   </span><br><span class="line">fastcgi_param  DOCUMENT_ROOT      $document_root; #网站的根目录。在server配置中root指令中指定的值   </span><br><span class="line">fastcgi_param  SERVER_PROTOCOL    $server_protocol; #请求使用的协议，通常是HTTP/1.0或HTTP/1.1。    </span><br><span class="line"></span><br><span class="line">fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;#cgi 版本  </span><br><span class="line">fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;#nginx 版本号，可修改、隐藏  </span><br><span class="line"></span><br><span class="line">fastcgi_param  REMOTE_ADDR        $remote_addr; #客户端IP  </span><br><span class="line">fastcgi_param  REMOTE_PORT        $remote_port; #客户端端口  </span><br><span class="line">fastcgi_param  SERVER_ADDR        $server_addr; #服务器IP地址  </span><br><span class="line">fastcgi_param  SERVER_PORT        $server_port; #服务器端口  </span><br><span class="line">fastcgi_param  SERVER_NAME        $server_name; #服务器名，域名在server配置中指定的server_name  </span><br><span class="line"></span><br><span class="line">#fastcgi_param  PATH_INFO           $path_info;#可自定义变量</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="works" scheme="http://yyg.wiki/categories/works/"/>
    
    
      <category term="Nginx" scheme="http://yyg.wiki/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu常用操作命令(个人常用)</title>
    <link href="http://yyg.wiki/2018/04/26/Ubuntu%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4-%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8/"/>
    <id>http://yyg.wiki/2018/04/26/Ubuntu常用操作命令-个人常用/</id>
    <published>2018-04-26T07:49:37.000Z</published>
    <updated>2018-04-26T07:50:17.866Z</updated>
    
    <content type="html"><![CDATA[<h4 id="查看进程常用命令"><a href="#查看进程常用命令" class="headerlink" title="查看进程常用命令"></a>查看进程常用命令</h4><p><code>ps -ef</code><br><code>ps -aux</code></p><p><code>ps -ef|grep xx</code><br><code>ps -aux|grep xx</code></p><h5 id="STAT状态"><a href="#STAT状态" class="headerlink" title="STAT状态:"></a>STAT状态:</h5><p><code>Ss</code><br><code>Ss1</code><br><code>Ss+</code><br><code>S&lt;</code><br><code>R+</code><br><code>S&lt;s1</code><br><code>S&lt;s</code></p><h5 id="stat-中的参数意义如下："><a href="#stat-中的参数意义如下：" class="headerlink" title="stat 中的参数意义如下："></a>stat 中的参数意义如下：</h5><p><code>D 不可中断 Uninterruptible（usually IO）</code><br><code>R 正在运行，或在队列中的进程</code><br><code>S 处于休眠状态</code><br><code>T 停止或被追踪</code><br><code>Z 僵尸进程</code><br><code>W 进入内存交换（从内核2.6开始无效）</code><br><code>X   死掉的进程</code></p><p><code>&lt; 高优先级</code><br><code>n   低优先级</code><br><code>s   包含子进程</code><br><code>+   位于后台的进程组</code> </p><hr><h4 id="查看端口常用命令"><a href="#查看端口常用命令" class="headerlink" title="查看端口常用命令"></a>查看端口常用命令</h4><p><code>netstat -tnlp|grep 进程名称/端口号</code></p><hr><h4 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h4><p><code>free -m</code></p><hr><h4 id="查看磁盘空间"><a href="#查看磁盘空间" class="headerlink" title="查看磁盘空间"></a>查看磁盘空间</h4><p><code>df -h</code></p><hr><h4 id="可添加开机运行命令"><a href="#可添加开机运行命令" class="headerlink" title="可添加开机运行命令"></a>可添加开机运行命令</h4><p><code>/etc/rc.local</code></p><hr><h4 id="linux中可节省磁盘IO增加运行速度的小技巧-利用内存存放文件-如-session-cookie-等读写速度快-但重启文件消失"><a href="#linux中可节省磁盘IO增加运行速度的小技巧-利用内存存放文件-如-session-cookie-等读写速度快-但重启文件消失" class="headerlink" title="linux中可节省磁盘IO增加运行速度的小技巧 利用内存存放文件 如 session cookie 等读写速度快 但重启文件消失"></a>linux中可节省磁盘IO增加运行速度的小技巧 利用内存存放文件 如 session cookie 等读写速度快 但重启文件消失</h4><p><code>/dev/shm</code> 实际 连接目录为 <code>/run/shm</code></p><hr><h4 id="断网后命"><a href="#断网后命" class="headerlink" title="断网后命"></a>断网后命</h4><p><code>tail /var/log/syslog -n 20</code></p><p><code>ifconfig eth0 down</code><br><code>ifconfig eth0 up</code></p><hr><h4 id="文件查找命令"><a href="#文件查找命令" class="headerlink" title="文件查找命令"></a>文件查找命令</h4><p><code>find / -name ×××</code><br><code>whereis ×××</code></p><hr><h4 id="开机自动挂载设置"><a href="#开机自动挂载设置" class="headerlink" title="开机自动挂载设置"></a>开机自动挂载设置</h4><p><code>/etc/fstab</code></p><hr><h4 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h4><p> <code>/etc/rc.d</code></p><hr><h4 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h4><p><code>vim /etc/passwd</code></p><hr><h4 id="查看文件大小"><a href="#查看文件大小" class="headerlink" title="查看文件大小"></a>查看文件大小</h4><p><code>du -h filename</code></p><p> 以gb单位查看<br><code>du --block-size=GB filename</code></p><hr><h4 id="设置root密码"><a href="#设置root密码" class="headerlink" title="设置root密码"></a>设置root密码</h4><p><code>passwd root</code></p><hr><h4 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h4><p><code>pkill -9 process number or process name(master)</code></p><p><code>kill -9 process number</code></p><hr><h4 id="查看登录用户"><a href="#查看登录用户" class="headerlink" title="查看登录用户"></a>查看登录用户</h4><p><code>w</code></p><hr><h4 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h4><p><code>/etc/passwd</code></p><hr><h4 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h4><p><code>crontab</code></p><hr><h4 id="查看文件的的行数-字符数"><a href="#查看文件的的行数-字符数" class="headerlink" title="查看文件的的行数 字符数"></a>查看文件的的行数 字符数</h4><p><code>wc -c filename</code> 显示文件的字节数<br><code>wc -m filename</code> 显示文件的字符数<br><code>wc -l filename</code> 显示文件的行数<br><code>wc -L filename</code> 显示文件的最长行长度<br><code>wc -w filename</code> 显示文件的字数</p><hr><h4 id="搜索apt-get-库文件"><a href="#搜索apt-get-库文件" class="headerlink" title="搜索apt-get 库文件"></a>搜索apt-get 库文件</h4><p><code>apt-cache search libname</code></p><hr><h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><p><code>chomd -r 0777 XXXX</code><br><code>chome +x/+r/+w</code></p><hr><h4 id="拥有着-所属组"><a href="#拥有着-所属组" class="headerlink" title="拥有着 所属组"></a>拥有着 所属组</h4><p><code>chown -R</code><br><code>chgrp -R</code></p><hr><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><p><code>mkdir -p xxx/xxx</code></p><hr><h4 id="dpkg-安装deb包"><a href="#dpkg-安装deb包" class="headerlink" title="dpkg 安装deb包"></a>dpkg 安装deb包</h4><p><code>dpkg -i  xxx.deb</code><br><code>dpkg -r xxxx..deb 卸载</code></p><hr><h4 id="常见解压"><a href="#常见解压" class="headerlink" title="常见解压"></a>常见解压</h4><p><code>tar -zxvf xxxx -C xxxx/xxxx</code></p><p><code>*.tar 用 tar –xvf 解压</code><br><code>*.gz 用 gzip -d或者gunzip 解压</code><br><code>*.tar.gz和*.tgz 用 tar –xzf 解压</code><br><code>*.bz2 用 bzip2 -d或者用bunzip2 解压</code><br><code>*.tar.bz2用tar –xjf 解压</code><br><code>*.Z 用 uncompress 解压</code><br><code>*.tar.Z 用tar –xZf 解压</code><br><code>*.rar 用 unrar e解压</code><br><code>*.zip 用 unzip 解压</code></p><hr><h4 id="链接-软链"><a href="#链接-软链" class="headerlink" title="链接/软链"></a>链接/软链</h4><p><code>ln -s 源文件 目标文件      软链</code><br><code>ln 源文件 目标文件  硬链</code></p><hr><h4 id="移动-重命名文件"><a href="#移动-重命名文件" class="headerlink" title="移动/重命名文件"></a>移动/重命名文件</h4><p><code>mv 源文件 目标位置</code><br><code>mv  a.txt b.txt  重命名</code></p><hr><h4 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h4><p><code>cp 源文件 目标位置</code></p><hr><h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><p><code>wget URL路径</code></p><hr><h4 id="apt-安装"><a href="#apt-安装" class="headerlink" title="apt 安装"></a>apt 安装</h4><p><code>apt-get install -y xxxxx</code><br><code>apt-get remove xxxxx</code><br><code>apt-get update</code></p><hr><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><p><code>touch aa.txt</code></p><hr><h4 id="截断-输出文件内容"><a href="#截断-输出文件内容" class="headerlink" title="截断/输出文件内容"></a>截断/输出文件内容</h4><p><code>cat</code></p><hr><h4 id="重启系统-关闭系统"><a href="#重启系统-关闭系统" class="headerlink" title="重启系统/关闭系统"></a>重启系统/关闭系统</h4><p><code>init 6</code><br><code>init 0</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;查看进程常用命令&quot;&gt;&lt;a href=&quot;#查看进程常用命令&quot; class=&quot;headerlink&quot; title=&quot;查看进程常用命令&quot;&gt;&lt;/a&gt;查看进程常用命令&lt;/h4&gt;&lt;p&gt;&lt;code&gt;ps -ef&lt;/code&gt;&lt;br&gt;&lt;code&gt;ps -aux&lt;/code&gt;&lt;/p
      
    
    </summary>
    
      <category term="works" scheme="http://yyg.wiki/categories/works/"/>
    
    
      <category term="Linux" scheme="http://yyg.wiki/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>浅析PHP中STATIC、CONST、 DEFINE的区别（归纳总结）</title>
    <link href="http://yyg.wiki/2018/04/26/%E6%B5%85%E6%9E%90PHP%E4%B8%ADSTATIC%E3%80%81CONST%E3%80%81-DEFINE%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%88%E5%BD%92%E7%BA%B3%E6%80%BB%E7%BB%93%EF%BC%89/"/>
    <id>http://yyg.wiki/2018/04/26/浅析PHP中STATIC、CONST、-DEFINE的区别（归纳总结）/</id>
    <published>2018-04-26T07:43:50.000Z</published>
    <updated>2018-04-26T07:48:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="const与define的特点与区别"><a href="#const与define的特点与区别" class="headerlink" title="const与define的特点与区别"></a>const与define的特点与区别</h2><ol><li>const是语言结构，而define是函数。在常量编译时const所做的仅仅是替换即可，而define因为是函数，效率低于const。</li><li>const支持的数据类型为：boolean，string，float，integer，const不支持表达式赋值。而define支持表达式赋值。</li><li>const不可以在条件判断语句中使用，define可以在条件判断语句中使用。</li><li>const可以在类中使用，define不可以。</li><li>const严格区分大小写，define可以通过参数进行选择。</li><li>const可以在类外部、类内部。但是不可以出现在函数中。</li></ol><h2 id="const与staic的区别"><a href="#const与staic的区别" class="headerlink" title="const与staic的区别"></a>const与staic的区别</h2><ol><li>const定义类成员属性时。一经定义不可修改。而static只相当于初始化类的时候设置一个默认值，在后续的操作中可以被改变，包括内部修改和外部修改。</li><li>const与static在类内部所定义的成员属性均可以在不实例化该类的条件下在外部调用，而且调用方式一致: ”类名称::成员属性名称“（调用静态属性时要加$符号）</li><li>const定义的类成员属性必须通过类名称在类外部调用。</li><li>const定义的成员属性在内部调用时与静态成员属性一致均使用 “self::属性名称” 方式调用</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;const与define的特点与区别&quot;&gt;&lt;a href=&quot;#const与define的特点与区别&quot; class=&quot;headerlink&quot; title=&quot;const与define的特点与区别&quot;&gt;&lt;/a&gt;const与define的特点与区别&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="works" scheme="http://yyg.wiki/categories/works/"/>
    
    
      <category term="PHP" scheme="http://yyg.wiki/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>常用的BASH快捷命令</title>
    <link href="http://yyg.wiki/2018/04/26/%E5%B8%B8%E7%94%A8%E7%9A%84BASH%E5%BF%AB%E6%8D%B7%E5%91%BD%E4%BB%A4/"/>
    <id>http://yyg.wiki/2018/04/26/常用的BASH快捷命令/</id>
    <published>2018-04-26T07:39:56.000Z</published>
    <updated>2018-04-26T07:40:40.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生活在-Bash-Shell-中，熟记以下快捷键，将极大的提高你的命令行操作效率。"><a href="#生活在-Bash-Shell-中，熟记以下快捷键，将极大的提高你的命令行操作效率。" class="headerlink" title="生活在 Bash Shell 中，熟记以下快捷键，将极大的提高你的命令行操作效率。"></a><strong>生活在 Bash Shell 中，熟记以下快捷键，将极大的提高你的命令行操作效率</strong>。</h2><h1 id="编辑命令"><a href="#编辑命令" class="headerlink" title="编辑命令"></a>编辑命令</h1><blockquote><p>Ctrl + a ：移到命令行首<br>Ctrl + e ：移到命令行尾<br>Ctrl + f ：按字符前移（右向）<br>Ctrl + b ：按字符后移（左向）<br>Alt + f ：按单词前移（右向）<br>Alt + b ：按单词后移（左向）<br>Ctrl + xx：在命令行首和光标之间移动<br>Ctrl + u ：从光标处删除至命令行首<br>Ctrl + k ：从光标处删除至命令行尾<br>Ctrl + w ：从光标处删除至字首<br>Alt + d ：从光标处删除至字尾<br>Ctrl + d ：删除光标处的字符<br>Ctrl + h ：删除光标前的字符<br>Ctrl + y ：粘贴至光标后<br>Alt + c ：从光标处更改为首字母大写的单词<br>Alt + u ：从光标处更改为全部大写的单词<br>Alt + l ：从光标处更改为全部小写的单词<br>Ctrl + t ：交换光标处和之前的字符<br>Alt + t ：交换光标处和之前的单词<br>Alt + Backspace：与 Ctrl + w 相同类似，分隔符有些差别 [感谢 rezilla 指正]</p></blockquote><h1 id="重新执行命令"><a href="#重新执行命令" class="headerlink" title="重新执行命令"></a>重新执行命令</h1><blockquote><p>Ctrl + r：逆向搜索命令历史<br>Ctrl + g：从历史搜索模式退出<br>Ctrl + p：历史中的上一条命令<br>Ctrl + n：历史中的下一条命令<br>Alt + .：使用上一条命令的最后一个参数</p></blockquote><h1 id="控制命令"><a href="#控制命令" class="headerlink" title="控制命令"></a>控制命令</h1><blockquote><p>Ctrl + l：清屏<br>Ctrl + o：执行当前命令，并选择上一条命令<br>Ctrl + s：阻止屏幕输出<br>Ctrl + q：允许屏幕输出<br>Ctrl + c：终止命令<br>Ctrl + z：挂起命令</p></blockquote><h1 id="Bang-命令"><a href="#Bang-命令" class="headerlink" title="Bang (!) 命令"></a>Bang (!) 命令</h1><blockquote><p>!!：执行上一条命令<br>!blah：执行最近的以 blah 开头的命令，如 !ls<br>!blah:p：仅打印输出，而不执行<br>!$：上一条命令的最后一个参数，与 Alt + . 相同<br>!$:p：打印输出 !$ 的内容<br>!<em>：上一条命令的所有参数<br>!</em>:p：打印输出 !* 的内容<br>^blah：删除上一条命令中的 blah<br>^blah^foo：将上一条命令中的 blah 替换为 foo<br>^blah^foo^：将上一条命令中所有的 blah 都替换为 foo<br>友情提示：</p></blockquote><p>以上介绍的大多数 Bash 快捷键仅当在 emacs 编辑模式时有效，若你将 Bash 配置为 vi 编辑模式，那将遵循 vi 的按键绑定。Bash 默认为 emacs 编辑模式。如果你的 Bash 不在 emacs 编辑模式，可通过 set -o emacs 设置。<br>^S、^Q、^C、^Z 是由终端设备处理的，可用 stty 命令设置。<br>摘自:<a href="http://www.linuxde.net/" target="_blank" rel="noopener">http://www.linuxde.net/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;生活在-Bash-Shell-中，熟记以下快捷键，将极大的提高你的命令行操作效率。&quot;&gt;&lt;a href=&quot;#生活在-Bash-Shell-中，熟记以下快捷键，将极大的提高你的命令行操作效率。&quot; class=&quot;headerlink&quot; title=&quot;生活在 Bash S
      
    
    </summary>
    
      <category term="works" scheme="http://yyg.wiki/categories/works/"/>
    
    
      <category term="Linux" scheme="http://yyg.wiki/tags/Linux/"/>
    
      <category term="Bash" scheme="http://yyg.wiki/tags/Bash/"/>
    
  </entry>
  
</feed>
